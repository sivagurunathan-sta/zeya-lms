generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INTERN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentType {
  CERTIFICATE
  PAID_TASK
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum TaskSubmissionType {
  GITHUB
  FORM
  FILE
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(INTERN)
  phone        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  enrollments      Enrollment[]
  submissions      Submission[]
  payments         Payment[]
  notifications    Notification[]
  chatPermission   ChatPermission?
  sentMessages     ChatMessage[]      @relation("SentMessages")
  receivedMessages ChatMessage[]      @relation("ReceivedMessages")
  assignedTasks    PrivateTask[]      @relation("AssignedBy")
  privateTasks     PrivateTask[]      @relation("AssignedTo")
  auditLogs        AuditLog[]
}

model Internship {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  coverImage       String?
  durationDays     Int      @default(35)
  isActive         Boolean  @default(true)
  price            Float    @default(0)
  certificatePrice Float    @default(499)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  tasks       Task[]
  enrollments Enrollment[]
  materials   CourseMaterial[]
  payments    Payment[]
}

model CourseMaterial {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  internshipId String   @db.ObjectId
  title        String
  description  String?
  materialType String
  fileUrl      String
  fileSize     Int?
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())

  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
}

model Task {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  internshipId    String             @db.ObjectId
  taskNumber      Int
  title           String
  description     String
  points          Int                @default(10)
  submissionType  TaskSubmissionType @default(GITHUB)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  internship  Internship   @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@unique([internshipId, taskNumber])
}

model Enrollment {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                String    @db.ObjectId
  internshipId          String    @db.ObjectId
  enrollmentDate        DateTime  @default(now())
  isCompleted           Boolean   @default(false)
  completionDate        DateTime?
  finalScore            Int?
  certificatePurchased  Boolean   @default(false)
  certificateIssued     Boolean   @default(false)
  certificateIssuedAt   DateTime?
  certificateUrl        String?
  certificateNumber     String?
  updatedAt             DateTime  @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  internship  Internship   @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@unique([userId, internshipId])
}

model Submission {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  enrollmentId     String             @db.ObjectId
  taskId           String             @db.ObjectId
  userId           String             @db.ObjectId
  submissionType   TaskSubmissionType
  githubUrl        String?
  formData         String?
  fileUrl          String?
  submissionDate   DateTime           @default(now())
  status           SubmissionStatus   @default(PENDING)
  score            Int?
  adminFeedback    String?
  reviewedAt       DateTime?
  nextTaskUnlocked Boolean            @default(false)
  updatedAt        DateTime           @updatedAt

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  task       Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, taskId])
}

model Payment {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String        @db.ObjectId
  internshipId           String?       @db.ObjectId
  paidTaskId             String?       @db.ObjectId
  amount                 Float
  paymentType            PaymentType
  paymentStatus          PaymentStatus @default(PENDING)
  paymentProofUrl        String?
  transactionId          String?
  verifiedTransactionId  String?
  qrCodeUrl              String?
  verifiedAt             DateTime?
  rejectionReason        String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  internship Internship? @relation(fields: [internshipId], references: [id], onDelete: SetNull)
  paidTask   PaidTask?   @relation(fields: [paidTaskId], references: [id], onDelete: SetNull)
}

model PaidTask {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float    @default(1000)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payments Payment[]
}

model ChatPermission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  isEnabled   Boolean   @default(false)
  enabledAt   DateTime?
  enabledBy   String?
  disabledAt  DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ChatMessage[]
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatRoomId String   @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String
  fileUrl    String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model PrivateTask {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  assignedToUserId String    @db.ObjectId
  assignedByUserId String    @db.ObjectId
  title            String
  description      String
  dueDate          DateTime?
  isCompleted      Boolean   @default(false)
  submissionUrl    String?
  completedAt      DateTime?
  createdAt        DateTime  @default(now())

  assignedTo User @relation("AssignedTo", fields: [assignedToUserId], references: [id], onDelete: Cascade)
  assignedBy User @relation("AssignedBy", fields: [assignedByUserId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  userId    String   @db.ObjectId
  details   String
  ipAddress String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}